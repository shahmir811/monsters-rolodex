{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","monster","id","name","email","url","className","src","alt","CardList","monsters","map","key","SearchBox","placeholder","searchField","handleChange","type","value","onChange","e","App","state","setState","target","render","filteredMonsters","filter","toLowerCase","includes","axios","get","response","this","data","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qYAgBeA,G,kBAbF,SAAAC,GAAU,IAAD,EACQA,EAAMC,QAA1BC,EADY,EACZA,GAAIC,EADQ,EACRA,KAAMC,EADE,EACFA,MACZC,EAAG,+BAA2BH,EAA3B,0BAET,OACE,yBAAKI,UAAU,kBACb,yBAAKC,IAAKF,EAAKG,IAAKL,IACpB,4BAAKA,GACL,2BAAIC,MCMKK,EAZE,SAAAT,GAAU,IACjBU,EAAaV,EAAbU,SAER,OACE,yBAAKJ,UAAU,aACZI,EAASC,KAAI,SAAAV,GAAO,OACnB,kBAAC,EAAD,CAAMW,IAAKX,EAAQC,GAAID,QAASA,SCMzBY,G,MAdG,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC7C,OACE,6BACE,2BACEV,UAAU,SACVW,KAAK,SACLH,YAAaA,EACbI,MAAOH,EACPI,SAAU,SAAAC,GAAC,OAAIJ,EAAaI,SCuCrBC,E,2MAzCbC,MAAQ,CACNZ,SAAU,GACVK,YAAa,I,EAafC,aAAe,SAAAI,GACb,EAAKG,SAAS,CACZR,YAAaK,EAAEI,OAAON,S,EAI1BO,OAAS,WAAO,IAAD,EACqB,EAAKH,MAA/BZ,EADK,EACLA,SAAUK,EADL,EACKA,YACZW,EAAmBhB,EAASiB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASd,EAAYa,kBAGlD,OACE,yBAAKtB,UAAU,OACb,gDACA,kBAAC,EAAD,CACEQ,YAAY,iBACZC,YAAa,EAAKO,MAAMP,YACxBC,aAAc,EAAKA,eAErB,kBAAC,EAAD,CAAUN,SAAUgB,M,qLA7BHI,IAAMC,IACzB,+C,OADEC,E,OAIJC,KAAKV,SAAS,CACZb,SAAUsB,EAASE,O,sDAZPC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAShB,OAAO,kBAAC,EAAD,MAASiB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.78fa9441.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = props => {\r\n  const { id, name, email } = props.monster;\r\n  const url = `https://robohash.org/${id}&set=set2&size=180x180`;\r\n\r\n  return (\r\n    <div className='card-container'>\r\n      <img src={url} alt={name} />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\n\r\nimport Card from '../card/card.component';\r\n\r\nconst CardList = props => {\r\n  const { monsters } = props;\r\n\r\n  return (\r\n    <div className='card-list'>\r\n      {monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ placeholder, searchField, handleChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        value={searchField}\r\n        onChange={e => handleChange(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n// Importing components\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: ''\n  };\n\n  async componentDidMount() {\n    let response = await axios.get(\n      'https://jsonplaceholder.typicode.com/users'\n    );\n\n    this.setState({\n      monsters: response.data\n    });\n  }\n\n  handleChange = e => {\n    this.setState({\n      searchField: e.target.value\n    });\n  };\n\n  render = () => {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='Search monster'\n          searchField={this.state.searchField}\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}